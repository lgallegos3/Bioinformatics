# perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data=alpha)
library(phyloseq)
library(dplyr)
library(BiMiCo)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family! = "Mitochondria" |  is.na(Family) & Order! = "Chloroplast" | is.na(Order))
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file="RData/physeq.RData")
load("RData/physeq.RData")
plot_bar(physeq, fill="Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill")
library(ggplot2)
plot_bar(physeq, fill="Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x / sum(x))
# barplot
plot_bar(physeq_relabund, fill="Phylum") + geom_bar(aes(color=Phylum, fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales= "free")
plot_richness(physeq, x="body.site", color="subject", measures=c("Observed", "Simpson", "Shannon"))
plot_richness(physeq, x="reported.antibiotic.usage", color="body.site", measures=c("Observed", "Simpson", "Shannon"))
plot_richness(physeq, x="subject", color="body.site", measures=c("Observed", "Simpson", "Shannon"))
alpha <- estimate_richness(physeq, measures=c("Observed", "Simpson", "Shannon"))
# Shapiro-wilk
observed <- shapiro.test(alpha$Observed)
shannon <- shapiro.test(alpha$Shannon)
simpson <- shapiro.test(alpha$Simpson)
# print
print(observed)
print(shannon)
print(simpson)
# extract sample information from the physeq object
samples <- sample_data(physeq)
# If samples is a phyloseq sample_data object, convert it to a data frame
if (class(samples) =="sample_data") {samples <- data.frame(sample_data(samples))}
# add a column to alpha with sample names
alpha$sample <- rownames(alpha)
# merge alpha diversity data and sample data
alpha <- merge(alpha, samples, by = "sample")
# perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data=alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data=alpha)
test_shannon <- t.test(shannon ~ subject, data=alpha)
# perform t/wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ subject, data=alpha)
test_simpson <- wilcox.test(Simpson ~ subject, data=alpha)
test_shannon <- t.test(Shannon ~ subject, data=alpha)
# printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
# perform t/Wilcox tests for each biodiversity index
test_observed <- wilcox.test(Observed ~ reported.antibiotic.usage, data=alpha)
test_simpson <- wilcox.test(Simpson ~ reported.antibiotic.usage, data=alpha)
test_shannon <- t.test(Shannon ~ reported.antibiotic.usage, data=alpha)
# printing the results
print(test_observed)
print(test_simpson)
print(test_shannon)
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method = "holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method = "holm")
shannonanova <- aov(Shannon ~ body.site, data=aplha)
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method = "holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method = "holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TurkeyHSD(shannonanova)
kruskal.test(Simpson ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Simpson, alpha$body.site, p.adjust.method = "holm")
kruskal.test(Observed ~ body.site, data=alpha)
pairwise.wilcox.test(alpha$Observed, alpha$body.site, p.adjust.method = "holm")
shannonanova <- aov(Shannon ~ body.site, data=alpha)
summary(shannonanova)
TukeyHSD(shannonanova)
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family! = "Mitochondria" |  is.na(Family) & Order! = "Chloroplast" | is.na(Order))
setwd("C:/Users/Galle/OneDrive/Desktop/Bioinformatics/Transcriptome")
library(ballgown)
library(RColorBrewer)
library(genefilter)
library(dplyr)
library(devtools)
pheno_data<-data.frame(ids = c("plank01", "plank02", "biofilm01", "biofilm02"),
stage = c("planktonic", "planktonic", "biofilm", "biofilm"))
samples.c <- paste('ballgown', pheno_data$ids, sep = '/')
bg <- ballgown(samples = samples.c, meas='all', pData = pheno_data)
bg
bg_filt = subset(bg,"rowVars(texpr(bg)) >1",genomesubset=TRUE)
bg_filt
results_transcripts<- stattest(bg_filt, feature = "transcript", covariate = "stage",
getFC = TRUE, meas = "FPKM")
results_transcripts<-data.frame(geneNames=geneNames(bg_filt),
transcriptNames=transcriptNames(bg_filt), results_transcripts)
View(results_transcripts)
results_transcripts[results_transcripts$transcriptNames == "gene-PA0135", ]
results_transcripts[results_transcripts$transcriptNames == "gene-PA0100", ]
sigdiff <- results_transcripts %>% filter(pval<0.05)
dim(sigdiff)
o = order(sigdiff[,"pval"], -abs(sigdiff[,"fc"]), decreasing=FALSE)
output = sigdiff[o,c("geneNames","transcriptNames", "id","fc","pval","qval")]
write.table(output, file="SigDiff.txt", sep="\t", row.names=FALSE, quote=FALSE)
head(output)
bg_table = texpr(bg_filt, 'all')
bg_gene_names = unique(bg_table[, 9:10])
gene_expression = as.data.frame(gexpr(bg_filt))
head(gene_expression)
colnames(gene_expression) <- c("plank01", "plank02", "biofilm01", "biofilm02")
head(gene_expression)
dim(gene_expression)
transcript_gene_table = indexes(bg)$t2g
head(transcript_gene_table)
length(row.names(transcript_gene_table))
length(unique(transcript_gene_table[,"g_id"]))
counts=table(transcript_gene_table[,"g_id"])
c_one = length(which(counts == 1))
c_more_than_one = length(which(counts > 1))
c_max = max(counts)
hist(counts, breaks=50, col="bisque4", xlab="Transcripts per gene",
main="Distribution of transcript count per gene")
legend_text = c(paste("Genes with one transcript =", c_one),
paste("Genes with more than one transcript =", c_more_than_one),
paste("Max transcripts for single gene = ", c_max))
legend("topright", legend_text, lty=NULL)
x = gene_expression[,"biofilm01"]
y = gene_expression[,"biofilm02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Biofilm, Replicate 1)", ylab="FPKM (Biofilm, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "hotpink")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
x = gene_expression[,"plank01"]
y = gene_expression[,"plank02"]
min_nonzero=1
plot(x=log2(x+min_nonzero), y=log2(y+min_nonzero), pch=16, col="purple", cex=0.25,
xlab="FPKM (Planktonic, Replicate 1)", ylab="FPKM (Planktonic, Replicate 2)",
main="Comparison of expression values for a pair of replicates")
abline(a=0,b=1, col = "hotpink")
rs=cor(x,y)^2
legend("topleft", paste("R squared = ", round(rs, digits=3), sep=""), lwd=1, col="black")
results_genes = stattest(bg_filt, feature="gene", covariate="stage", getFC=TRUE, meas="FPKM")
results_genes = merge(results_genes,bg_gene_names,by.x=c("id"),by.y=c("gene_id"))
sig=which(results_genes$pval<0.05)
results_genes[,"de"] = log2(results_genes[,"fc"])
hist(results_genes[sig,"de"], breaks=50, col="seagreen",
xlab="log2(Fold change) Planktonic vs Biofilm",
main="Distribution of differential expression values")
abline(v=-2, col="black", lwd=2, lty=2)
abline(v=2, col="black", lwd=2, lty=2)
legend("topleft", "Fold-change > 4", lwd=2, lty=2)
